#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <math.h>
#include <Windows.h>

typedef enum {
    SUCCESS = 0,
    INCORRECT_NUMBER_INPUT,
    INCORRECT_FLAG_INPUT,
    INCORRECT_NUMBER_ARGUMENTS_INPUT,
    UNKNOWN_ERROR
} ErrorCode;

static const char* errorMessages[] = {
        "Всё хорошо",
        "Некорректный ввод числа, попробуйте ещё раз",
        "Некорректный ввод флага, попробуйте ещё раз",
        "Некорректное кол-во аргументов, попробуйте ещё раз",
        "Неизвестная ошибка, что-то пошло не так"
};

void is_quadratic_equation (double epsilon, double num_1, double num_2, double num_3) {

    double discriminant, x_1, x_2;

    double numbers[3] = {num_1, num_2, num_3};

    // printf("%lfx^2 + %lfx + %lf = 0 \n Решения:", numbers[0], numbers[1], numbers[2]);

    for(int i=0; i<3; ++i) {
        for(int j=0; j<3; ++j) {
            for(int k=0; k<3; ++k) {
                if(i==j || k==j || k==i || numbers[i] == 0) continue;

                discriminant = numbers[j] * numbers[j] - 4 * numbers[i] * numbers[k];
                // printf("\ndis=%lf", discriminant);

                if(discriminant > 0+epsilon) {
                    printf("\nПри %lf, %lf, %lf корни следующие: ", numbers[i], numbers[j], numbers[k]);
                    x_1 = (-numbers[j] - sqrt(discriminant)) / (2 * numbers[i]);
                    if(x_1 < epsilon * 0.001 && x_1 > -epsilon * 0.001)
                        x_1 = 0;
                    x_2 = (-numbers[j] + sqrt(discriminant)) / (2 * numbers[i]);
                    if(x_2 < epsilon * 0.001 && x_2 > -epsilon * 0.001)
                        x_2 = 0;
                    printf("x1 = %lf, x2 = %lf", x_1, x_2);
                } else if (discriminant <= 0+epsilon && discriminant >= 0-epsilon) {
                    printf("\nПри %lf, %lf, %lf корень следующие: ", numbers[i], numbers[j], numbers[k]);
                    x_1 = -numbers[j] / (2 * numbers[i]);
                    printf("x1 = %lf", x_1);
                }
            }
        }
    }

}

void check_for_multiplicity(int num_1, int num_2) {

    if(num_1 % num_2 == 0)
        printf("Кратно");
    else
        printf("Не кратно");
}

void is_right_triangle(double epsilon, double num_1, double num_2, double num_3) {
    double resault_1, resault_2, resault_3;


    resault_1 = num_1*num_1 + num_2*num_2 - num_3*num_3;
    resault_2 = num_3*num_3 + num_1*num_1 - num_2*num_2;
    resault_3 = num_2*num_2 + num_3*num_3 - num_1*num_1;

    if(resault_1 < epsilon && -epsilon < resault_1 || resault_2 < epsilon && -epsilon < resault_2 || resault_3 < epsilon && -epsilon < resault_3)
        printf("Для сторон %lf, %lf, %lf: треугольник существует\n", num_1, num_2, num_3);

}

int is_check_correct_number_arguments(int argc, int correct_number_arguments) {
    if (argc != correct_number_arguments) {
        printf("%s\n", errorMessages[INCORRECT_NUMBER_ARGUMENTS_INPUT]);
        return INCORRECT_NUMBER_ARGUMENTS_INPUT;
    }
}

int is_check_correct_float_number(char *str) {
    int len;
    float ignore;

    int ret = sscanf(str, "%f %n", &ignore, &len);

    if(!(ret==1 && !str[len])) return SUCCESS;
    else return INCORRECT_NUMBER_INPUT;
}

int is_num_func(int number, int length) {
    int count = 0, answer;
    while(number != 0) {
        count++;
        number /= 10;
    }

    answer = (count != length) ? SUCCESS : INCORRECT_NUMBER_ARGUMENTS_INPUT;

    return answer;
}

int main(int argc, char *argv[])
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    if(strchr("-/", argv[1][0]) != NULL && argv[1][1] == 'q') {

        is_check_correct_number_arguments(argc, 6);

        if(!(is_check_correct_float_number(argv[2]) && is_check_correct_float_number(argv[3]) &&
                is_check_correct_float_number(argv[4]) && is_check_correct_float_number(argv[5]))) {
            printf("%s\n", errorMessages[INCORRECT_NUMBER_INPUT]);
            return INCORRECT_NUMBER_INPUT;
        }

        is_quadratic_equation(atof(argv[2]), atof(argv[3]), atof(argv[4]), atof(argv[5]));

    } else if(strchr("-/", argv[1][0]) != NULL && argv[1][1] == 'm') {

        is_check_correct_number_arguments(argc, 4);

        if(!(is_num_func(atoi(argv[2]), strlen(argv[2])) && is_num_func(atoi(argv[3]), strlen(argv[3])))) {
            printf("%s\n", errorMessages[INCORRECT_NUMBER_INPUT]);
            return INCORRECT_NUMBER_INPUT;
        }

        check_for_multiplicity(atoi(argv[2]), atoi(argv[3]));

    } else if(strchr("-/", argv[1][0]) != NULL && argv[1][1] == 't') {

        is_check_correct_number_arguments(argc, 6);

        if(!(is_check_correct_float_number(argv[2]) && is_check_correct_float_number(argv[3]) &&
             is_check_correct_float_number(argv[4]) && is_check_correct_float_number(argv[5]))) {
            printf("%s\n", errorMessages[INCORRECT_NUMBER_INPUT]);
            return INCORRECT_NUMBER_INPUT;
        }

        is_right_triangle(atof(argv[2]), atof(argv[3]), atof(argv[4]), atof(argv[5]));

    } else {
        printf("%s\n", errorMessages[INCORRECT_FLAG_INPUT]);
        return INCORRECT_FLAG_INPUT;
    }

    return SUCCESS;
}
