#include <stdio.h>
#include <stdlib.h> 
#include <string.h>
#include <Windows.h>

typedef enum {
    SUCCESS = 0,
    INCORRECT_NUMBER_INPUT,
    INCORRECT_FLAG_INPUT,
    INCORRECT_NUMBER_ARGUMENTS_INPUT,
    FILE_OPENING_ERROR,
    FILE_READING_ERROR,
    FILE_WRITING_ERROR,
    FILE_CLOSING_ERROR,
    MEMORY_ALLOCATION_ERROR,
    UNKNOWN_ERROR
} ErrorCode;

static const char* errorMessages[] = {
        "Всё хорошо",
        "Некорректный ввод числа, попробуйте ещё раз",
        "Некорректный ввод флага, попробуйте ещё раз",
        "Некорректное кол-во аргументов, попробуйте ещё раз",
        "Ошибка открытия файла",
        "Ошибка чтения файла",
        "Ошибка записи файла",
        "Ошибка закрытия файла",
        "Ошибка выделения памяти",
        "Неизвестная ошибка, что-то пошло не так"
};

char* transformation_from_decimal_to_otherBase(int base, int num) {
    int extra_result[1025], counter = 0;

    while(num != 0) {
        extra_result[counter] = num % base;
        num /= base;
        counter++;
    }

    char *result = (char*)malloc(sizeof (char) * counter);

    if(result == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }

    for(int i = counter-1; i >= 0; --i)
        result[counter-i-1] = extra_result[i] + '0';

    return result;
}

int file_concatenation(char *input_file_name_1, char *input_file_name_2, char *output_file_name) {
    FILE *fp_1, *fp_2, *fp_3;
    int i = 0, is_end_file_1 = 0, is_end_file_2 = 0;
    char lexema_even, lexema_odd, word[1025] = "";

    if((fp_1 = fopen (input_file_name_1,"r")) == NULL) return FILE_OPENING_ERROR;
    if((fp_2 = fopen (input_file_name_2,"r")) == NULL) {
        if (fclose (fp_1) == EOF)
            return FILE_CLOSING_ERROR;
        return FILE_OPENING_ERROR;
    }
    if((fp_3 = fopen (output_file_name,"w")) == NULL) {
        if (fclose (fp_1) == EOF)
            return FILE_CLOSING_ERROR;
        if (fclose (fp_2) == EOF)
            return FILE_CLOSING_ERROR;
        return FILE_OPENING_ERROR;
    }

    while (1)
    {
        while (1 && !is_end_file_1) {

            lexema_even = fgetc(fp_1);

            if (lexema_even == EOF) {
                fprintf(fp_3, "%s ", word);
                if ( feof (fp_1) != 0) {
                    is_end_file_1 = 1;
                    break;
                } else {
                    if (fclose (fp_1) == EOF || fclose (fp_2) == EOF || fclose (fp_3) == EOF)
                        return FILE_CLOSING_ERROR;
                    return FILE_READING_ERROR;
                }
            }

            if((int)lexema_even <= 32 && word[0] != '\0') {
                if (fprintf(fp_3, "%s ", word) < 0) {
                    if (fclose (fp_1) == EOF || fclose (fp_2) == EOF || fclose (fp_3) == EOF)
                        return FILE_CLOSING_ERROR;
                    return FILE_WRITING_ERROR;
                }
                break;
            } else if ((int)lexema_even <= 32) {
            } else {
                word[i] = lexema_even;
                i++;
            }

        }

        for(int j=0; j<1025; ++j)
            word[j] = '\0';

        i = 0;

        while (1 && !is_end_file_2) {

            lexema_odd = fgetc(fp_2);

            if (lexema_odd == EOF) {
                if (fprintf(fp_3, "%s ", word) < 0) {
                    if (fclose (fp_1) == EOF || fclose (fp_2) == EOF || fclose (fp_3) == EOF)
                        return FILE_CLOSING_ERROR;
                    return FILE_WRITING_ERROR;
                }
                if ( feof (fp_2) != 0) {
                    is_end_file_2 = 1;
                    break;
                } else {
                    if (fclose (fp_1) == EOF || fclose (fp_2) == EOF || fclose (fp_3) == EOF)
                        return FILE_CLOSING_ERROR;
                    return FILE_READING_ERROR;
                }
            }


            if((int)lexema_odd <= 32 && word[0] != '\0') {
                if (fprintf(fp_3, "%s ", word) < 0) {
                    if (fclose (fp_1) == EOF || fclose (fp_2) == EOF || fclose (fp_3) == EOF)
                        return FILE_CLOSING_ERROR;
                    return FILE_WRITING_ERROR;
                }
                break;
            } else if ((int)lexema_odd <= 32) {
            } else {
                word[i] = lexema_odd;
                i++;
            }
        }

        for(int j=0; j<1025; ++j)
            word[j] = '\0';

        i = 0;

        if(is_end_file_2 && is_end_file_1) break;

    }

    if (fclose (fp_1) == EOF || fclose (fp_2) == EOF || fclose (fp_3) == EOF)
        return FILE_CLOSING_ERROR;

    return SUCCESS;
}

int file_transformation(char *input_file_name_1, char *output_file_name) {
    FILE *fp_1, *fp_2;
    int i, counter=1, transformation_isComplete=0;
    char lexema, word[1025] = "", lang[26] = "";

    for (i = 0; i < 26; i++)
        lang[i] = i + 65;

    if((fp_1 = fopen (input_file_name_1,"r")) == NULL) return FILE_OPENING_ERROR;
    if((fp_2 = fopen (output_file_name,"w")) == NULL) {
        if (fclose (fp_1) == EOF)
            return FILE_CLOSING_ERROR;
        return FILE_OPENING_ERROR;
    }

    while (1)
    {
        lexema = fgetc(fp_1);

        if (lexema == EOF) {
            fprintf(fp_2, "%s ", word);
            if ( feof (fp_1) != 0) break;
            else {
                if (fclose (fp_1) == EOF)
                    return FILE_CLOSING_ERROR;
                if (fclose (fp_2) == EOF)
                    return FILE_CLOSING_ERROR;
                return FILE_READING_ERROR;
            }
        }

        if((int)lexema <= 32 && word[0] != '\0') {
            if(counter % 10 == 0) {
                for (int j = 0; j < strlen(word); j++)
                    if (fprintf(fp_2, "%s", transformation_from_decimal_to_otherBase(4, ((int) word[j]))) < 0) {
                        if (fclose(fp_1) == EOF)
                            return FILE_CLOSING_ERROR;
                        if (fclose(fp_2) == EOF)
                            return FILE_CLOSING_ERROR;
                        return FILE_WRITING_ERROR;
                    }

                fprintf(fp_2, " ");
            } else if(counter % 5 == 0) {
                for (int j = 0; j < strlen(word); j++)
                    if (fprintf(fp_2, "%s", transformation_from_decimal_to_otherBase(8, ((int) word[j]))) < 0) {
                        if (fclose (fp_1) == EOF)
                            return FILE_CLOSING_ERROR;
                        if (fclose (fp_2) == EOF)
                            return FILE_CLOSING_ERROR;
                        return FILE_WRITING_ERROR;
                    }

                fprintf(fp_2, " ");
            } else if( fprintf(fp_2, "%s ", word) < 0) {
                if (fclose (fp_1) == EOF)
                    return FILE_CLOSING_ERROR;
                if (fclose (fp_2) == EOF)
                    return FILE_CLOSING_ERROR;
                return FILE_WRITING_ERROR;
            }


            for(int j=0; j < 1025; ++j)
                word[j] = '\0';

            i = 0; counter++;

        } else if ((int)lexema <= 32) {
        } else {
            if(counter % 10 == 0 || counter % 2 == 0) {
                if((int)lexema >= 65 && (int)lexema <= 90)
                    lexema = (int)lexema + 32;
            }
            word[i] = lexema;
            i++;
        }
    }

    if ( fclose (fp_1) == EOF || fclose (fp_2) == EOF)
        return FILE_CLOSING_ERROR;

    return SUCCESS;
}

int is_check_correct_number_arguments(int argc, int correct_number_arguments) {
    if (argc != correct_number_arguments) return INCORRECT_NUMBER_ARGUMENTS_INPUT;
    return  0;
}

int main (int argc, char *argv[]) {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    if (!(argc > 3 && argc < 6)) {
        printf("%s\n", errorMessages[INCORRECT_NUMBER_ARGUMENTS_INPUT]);
        return INCORRECT_NUMBER_ARGUMENTS_INPUT;
    }

    char *result = NULL;
    int code_expected_error;

    if (argv[1][1] == 'r' && strchr("-/", argv[1][0]) != NULL) {

        if(is_check_correct_number_arguments(argc, 5) == INCORRECT_NUMBER_ARGUMENTS_INPUT){
            printf("%s\n", errorMessages[INCORRECT_NUMBER_ARGUMENTS_INPUT]);
            return INCORRECT_NUMBER_ARGUMENTS_INPUT;
        }

        code_expected_error = file_concatenation(argv[2], argv[3], argv[4]);

    } else if (argv[1][1] == 'a' && strchr("-/", argv[1][0]) != NULL) {

        if(is_check_correct_number_arguments(argc, 4) == INCORRECT_NUMBER_ARGUMENTS_INPUT) {
            printf("%s\n", errorMessages[INCORRECT_NUMBER_ARGUMENTS_INPUT]);
            return INCORRECT_NUMBER_ARGUMENTS_INPUT;
        }

        code_expected_error = file_transformation(argv[2], argv[3]);

    } else {
        printf("%s", errorMessages[INCORRECT_FLAG_INPUT]);
        return INCORRECT_FLAG_INPUT;
    }

    if(code_expected_error == FILE_OPENING_ERROR) {
        printf("%s", errorMessages[FILE_OPENING_ERROR]);
        return FILE_OPENING_ERROR;
    } else if(code_expected_error == FILE_WRITING_ERROR) {
        printf("%s", errorMessages[FILE_WRITING_ERROR]);
        return FILE_WRITING_ERROR;
    } else if(code_expected_error == FILE_CLOSING_ERROR) {
        printf("%s", errorMessages[FILE_CLOSING_ERROR]);
        return FILE_CLOSING_ERROR;
    } else if(code_expected_error == FILE_READING_ERROR) {
        printf("%s", errorMessages[FILE_READING_ERROR]);
        return FILE_READING_ERROR;
    }

    free(result);
    return SUCCESS;
}
