#include <stdio.h> 
#include <stdlib.h>
#include <math.h>
#include <Windows.h>

typedef enum {
    SUCCESS = 0,
    INCORRECT_NUMBER_INPUT,
    INCORRECT_FLAG_INPUT,
    INCORRECT_NUMBER_ARGUMENTS_INPUT,
    UNKNOWN_ERROR
} ErrorCode;

static const char* errorMessages[] = {
        "Всё хорошо",
        "Некорректный ввод числа, попробуйте ещё раз",
        "Некорректный ввод флага, попробуйте ещё раз",
        "Некорректное кол-во аргументов, попробуйте ещё раз",
        "Неизвестная ошибка, что-то пошло не так"
};


long double exponentiation(long double base, int indicator) {
    if(indicator == 0) return 1.0;

    long double result = 1.0;

    while(indicator > 0) {
        result *= base;
        --indicator;
    }

    return result;
}

long double factorial(int base) {
    if(base == 0) return 1.0;

    long int result=1, indicator=1;

    while(indicator < base+1) {
        result *= indicator;
        ++indicator;
    }

    return (long double)result;
}

long double tailFactorial(int start, int base) {
    if(base == 0) return 1.0;

    long int result=1;

    while(start < base+1) {
        result *= start;
        ++start;
    }

    return (long double)result;
}

int is_check_correct_float_number(char *str) {
    int len;
    float ignore;

    int ret = sscanf(str, "%f %n", &ignore, &len);

    if(!(ret==1 && !str[len])) return 0;
    else return 1;
}

int main(int argc, char *argv[])
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    int i=0;
    long double accuracy, result, extra_number, x;
    char strX[2] = "xx";

    if(!(is_check_correct_float_number(argv[1]))) {
        printf("%s\n", errorMessages[INCORRECT_NUMBER_INPUT]);
        return INCORRECT_NUMBER_INPUT;
    }

    accuracy = (long double)atof(argv[1]);


    while(strchr("123456789", strX[0]) == NULL || strchr("1234567890", strX[1]) == NULL) {
        if(strX[0] == '-' && strchr("1234567890", strX[1]) != NULL) break;
        printf("Введите x:");
        scanf("%s", strX);
    }

    sscanf(strX, "%Lf", &x);


    while(1) {
        extra_number = (i%2==0) ? exponentiation(x,i/2)/factorial(i/2)*exponentiation(x,i/2)/tailFactorial(i/2+1, i)
                : exponentiation(x,i/2)/factorial(i/2)*exponentiation(x,i/2+1)/tailFactorial(i/2+1, i);
        if(extra_number <= -2000 || extra_number >= 2000 || extra_number == -INFINITY
                || extra_number == INFINITY || isnan(-extra_number) || isnan(extra_number) || extra_number < accuracy) {
            printf("Первый пример: %10.20Lf", result);
            break;
        }
        result += extra_number;
        i++;
    }

    i = 0; result = 0; extra_number = 0;

    while(1) {
        extra_number = exponentiation(-1,i) / factorial(i/2) * exponentiation(x,i) / tailFactorial(i/2+1, i) *
                exponentiation(x,i) / tailFactorial(i+1,i+i/2) / tailFactorial(i+i/2+1,2*i);
        if(extra_number <= -2000 || extra_number >= 2000 ||  extra_number == -INFINITY
                || extra_number == INFINITY || isnan(-extra_number) || isnan(extra_number) || extra_number < accuracy && extra_number > 0
                        || extra_number < 0 && extra_number > -accuracy) {
            printf("\nВторой пример: %10.20Lf", result);
            break;
        }

        result += extra_number;
        i++;
    }

    i = 0; result = 0; extra_number = 0;

    while(1) {
        extra_number = exponentiation(3,3*i)*exponentiation(factorial(i),3)*exponentiation(x,2*i)/factorial(3*i);
        if(extra_number <= -2000 || extra_number >= 3000 || extra_number == -INFINITY || extra_number == INFINITY || isnan(-extra_number) || isnan(extra_number)) {
            (result < 0 || result > 20000000 || extra_number <= -2000 || extra_number >= 3000) ?
               printf("\nТретий пример: Ряд расходится") : printf("\nТретий пример: %10.20Lf", result);
            break;
        }
        result += extra_number;
        if(extra_number < accuracy || result > 20000000) {
            if(result < 0 || result > 20000000)
               printf("\nТретий пример: Ряд расходится");
            else {
                (result>0) ? result-- : result++;
                printf("\nТретий пример: %10.20Lf", result);
            }
            break;
        }

        i++;
    }

    i = 1; result = 0; extra_number = 0;

    while(1) {
        extra_number = exponentiation(-1,i)*factorial(factorial(2*i-1))*exponentiation(x,2*i)/factorial(factorial(2*i));
        if(extra_number <= -2000 || extra_number >= 2000 || extra_number == -INFINITY
                || extra_number == INFINITY || isnan(-extra_number) || isnan(extra_number)
                        || extra_number < accuracy && extra_number > 0 || extra_number < 0 && extra_number > -accuracy) {
            printf("\nЧетвертый пример: %10.20Lf", result);
            break;
        }
        result += extra_number;
        i++;
    }

    return SUCCESS;
}
